#!/usr/bin/python

import imaplib
import email
import hashlib
import os
import magic
from pyPdf import PdfFileWriter, PdfFileReader
import re


user=""
password=""
server=""
directoryraw="rawfrommail"
directorypdfsheets="pdfsheets"
directoryimagespre="imagespre"
directorytmp="tmp"
directoryimagespost="imagespost"
processedimageslist="processed"

template="template.xtmpl"


#pop = poplib.POP3_SSL(server)
#pop.user(user)
#pop.pass_(password)

con = imaplib.IMAP4_SSL(server,993)
con.login(user, password)
con.select()



if not os.path.exists(directoryraw):
    os.makedirs(directoryraw)
if not os.path.exists(directorypdfsheets):
    os.makedirs(directorypdfsheets)
if not os.path.exists(directoryimagespre):
    os.makedirs(directoryimagespre)
if not os.path.exists(directoryimagestmp):
    os.makedirs(directoryimagestmp)
if not os.path.exists(directoryimagespost):
    os.makedirs(directoryimagespost)


# get amount of new mails and get the emails for them
#messages = [pop.retr(n+1) for n in range(len(pop.list()[1]))]

resp,data=con.search(None, '(UNSEEN)')

items = data[0].split()



# for every message get the second item (the message itself) and convert it to a string with \n; then create python email with the strings
#emails = [email.message_from_string('\n'.join(message[1])) for message in messages]



for emailid in items:

    resp, data = con.fetch(emailid, "(RFC822)") # fetching the mail, "`(RFC822)`" means "get the whole stuff", but you can ask for headers only, etc
    email_body = data[0][1] # getting the mail content
    mail = email.message_from_string(email_body) # parsing the mail content to get a mail object

    print "read new mail"
    # check for attachment;
    for part in mail.walk():
        if not mail.is_multipart():
            continue
        if mail.get('Content-Disposition'):
            continue
        file_name = part.get_filename()
        # check if email park has filename --> attachment part
        if file_name:
            print "attachment found\n"
            hash= hashlib.md5(part.get_payload(decode=True)).hexdigest()
            filename=directoryraw+"/"+file_name+"-"+hash
            file = open(filename,'w+')
            file.write(part.get_payload(decode=True))
            file.close()
con.close()

mimecomparator=magic.Magic(mime=True)
for file in os.listdir(directoryraw):
   type=mimecomparator.from_file(directoryraw+"/"+file)
   if type=="application/pdf":
       print "It's a PDF"
       inputpdf=PdfFileReader(open(directoryraw+"/"+file, "rb"))
       for i in xrange(inputpdf.numPages):
           output = PdfFileWriter()
           output.addPage(inputpdf.getPage(i))
           with open(directorypdfsheets+"/tmp.pdf", "wb") as outputStream:
               output.write(outputStream)
           hash=hashlib.md5(directorypdfsheets+"/tmp.pdf").hexdigest()
           os.rename(directorypdfsheets+"/tmp.pdf",directorypdfsheets+"/"+hash+".pdf")
           os.remove(directoryraw+"/"+file)
   elif type=="image/jpeg":
      hash=hashlib.md5(directoryraw+"/"+file).hexdigest()
      os.rename(directoryraw+"/"+file,directoryimagespre+"/"+hash+".jpg")
   elif type.find("image/")==0:
      hash=hashlib.md5(directoryraw+"/"+file).hexdigest()
      os.system("convert -verbose -colorspace RGB -interlace none -density 300 -quality 80 "+directoryraw+"/"+file+" "+directoryimagespre+"/"+os.path.splitext(file)[0]+".jpg")
      os.remove(directoryraw+"/"+file)
       

for file in os.listdir(directorypdfsheets):    
    os.system("convert -verbose -colorspace RGB -interlace none -density 300 -quality 80 "+directorypdfsheets+"/"+file+" "+directoryimagespre+"/"+os.path.splitext(file)[0]+".jpg")
    os.remove(directorypdfsheets+"/"+file)

for file in os.listdir(directoryimagespre):
    imagesize=os.popen("identify "+directoryimagespre+"/"+file+" | awk '{print $3}'").read()
    print "imagesize: "+imagesize
    size=re.search('([0-9]+)x([0-9]+)',imagesize);
    width=size.group(1)
    large=size.group(2)
    print "large: "+large+" width: "+width
    if width>large:
        os.system("convert -rotate 90 "+directoryimagespre+"/"+file+" "+directoryimagespre+"/"+file)

print "formscanner "+template+" "+directoryimagespre

#process
os.system("bash /usr/bin/formscanner "+template+" "+directoryimagespre)

resultsfile=null
for file in os.listdir(directoryimagespost):
    if file.endswith(".csv"):
        resultsfile=file  
        os.system("cat "+file+" | sed -e 's/] Q/]_Q/g' | sed -e 's/\[//g'|sed -e 's/\]//g' | sed -e 's/;centro_Question001/imagen_id;centro_Question001/'")

#TODO remove first line

#import to BBDD

#mysqlimport -h xxxxx -u xxxxxx -pxxxxx --fields-terminated-by=';'  --local xxxxx xxxxx.csv


#move processed images
os.system("cat results_retocado | grep jpg | awk 'BEGIN {FS=\";\"}{print $1}' >"+directorytmp+"/"+processedimageslist);

lines=null
with open(directorytmp+"/"+processedimageslist) as file:
    lines = file.readlines()

for line in lines:
    os.rename(directoryimagespre+"/"+line,directoryimagespost+"/"+line )


#rotate not processed, next time will be rotate again, so completly rotated images will be right way anytime
for image in os.listdir(directoryimagespre):
    os.system("convert -rotate 90 "+directoryimagespre+"/"+file+" "+directoryimagespre+"/"+file)

    #    os.rename(directoryimagespre+"/"+file,directoryimagespost+"/"+file)
        



